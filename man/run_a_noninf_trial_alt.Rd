% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sim_noninferiority_alt.R
\name{run_a_noninf_trial_alt}
\alias{run_a_noninf_trial_alt}
\title{Run a non-inferiority trial}
\usage{
run_a_noninf_trial_alt(id, mu, delta_sup = 0.1, delta_ctr = delta_sup,
  delta_noninf = delta_sup, delta_pair = delta_sup,
  kappa_act_0 = 0.01, kappa_act_1 = 0.05, kappa_sup_0 = 0.95,
  kappa_sup_1 = 0.8, kappa_ctr_0 = 0.95, kappa_ctr_1 = 0.95,
  kappa_noninf_0 = 0.6, kappa_noninf_1 = 0.6, kappa_nonsup_0 = 0.1,
  kappa_nonsup_1 = 0.1, brar = FALSE, allocate_inactive = FALSE,
  return_all = FALSE, ind_comp_ctrl = FALSE, ctrl_alloc = 1/13,
  Nseq = seq(500, 10000, length.out = 20))
}
\arguments{
\item{id}{The trial ID}

\item{mu}{The true mean, must be length 13}

\item{delta_sup}{The superiority margin}

\item{delta_ctr}{The superiority margin for control comparisons}

\item{delta_noninf}{The noninferiority margin}

\item{delta_pair}{The margin for pairwise comparisons}

\item{kappa_act_0}{The starting threshold to deactivate poor arms}

\item{kappa_act_1}{The final threshold to deactivate poor arms}

\item{kappa_sup_0}{The starting threshold for superiority}

\item{kappa_sup_1}{The final threshold for superiority}

\item{kappa_ctr_0}{The starting threshold for beating control}

\item{kappa_ctr_1}{THe final threshold for beating control}

\item{kappa_noninf_0}{The starting threshold for non-inferiority}

\item{kappa_noninf_1}{The final threshold for non-inferiority}

\item{kappa_nonsup_0}{The starting threshold for non-superiority}

\item{kappa_nonsup_1}{The final threshold for non-superiority}

\item{brar}{Use Response Adaptive Randomisation?}

\item{allocate_inactive}{Continue to allocate subjects to arms meeting the inactive threshold?}

\item{return_all}{Return all value, or only those from final analysis?}

\item{ind_comp_ctrl}{Should deactivation be based on independent 
P(max trt arms) and P(beat ctrl) or just global P(max all arms)}
}
\value{
A list of trial quantities
}
\description{
As sim_noninferiority.R, except
rather than stopping for superiority by
delta, always base superiority on prob(max).
}
